# Cargar los datos desde el archivo CSV
data <- read.csv("C:/Users/geral/OneDrive - Universidad del Pacífico/Educacion/BREIT/classes/1.data_analysis_for_social_scientists/Final Exam/data_myData.csv")
# Calcular la media de Y para el grupo tratado y el grupo de control
mean_treated <- mean(data$Y[data$T == 1])
mean_control <- mean(data$Y[data$T == 0])
# Calcular el ATE
ATE <- mean_treated - mean_control
# Imprimir el ATE con tres decimales
print(round(ATE, 3))
mean_treated
data
# Calcular la media de Y para el grupo tratado y el grupo de control
mean_treated <- mean(data$Y[data$T == 1], na.rm = T)
mean_control <- mean(data$Y[data$T == 0], na.rm = T)
# Calcular el ATE
ATE <- mean_treated - mean_control
# Imprimir el ATE con tres decimales
print(round(ATE, 3))
# Calcular la varianza muestral para cada grupo
var_control <- var(data$Y[data$T == 0])
var_treatment <- var(data$Y[data$T == 1])
# Calcular el tamaño de muestra para cada grupo
N_c <- sum(data$T == 0)
N_t <- sum(data$T == 1)
# Calcular el estimador conservador de la varianza muestral de Neyman
V_neyman <- (var_control / N_c) + (var_treatment / N_t)
# Imprimir el resultado redondeado a dos decimales
print(round(V_neyman, 2))
# Cargar los datos desde el archivo CSV
data <- read.csv("C:/Users/geral/OneDrive - Universidad del Pacífico/Educacion/BREIT/classes/1.data_analysis_for_social_scientists/Final Exam/data_myData.csv") %>% na.omit
library(tidyverse)
# Cargar los datos desde el archivo CSV
data <- read.csv("C:/Users/geral/OneDrive - Universidad del Pacífico/Educacion/BREIT/classes/1.data_analysis_for_social_scientists/Final Exam/data_myData.csv") %>% na.omit
# Calcular la media de Y para el grupo tratado y el grupo de control
mean_treated <- mean(data$Y[data$T == 1], na.rm = T)
mean_control <- mean(data$Y[data$T == 0], na.rm = T)
# Calcular el ATE
ATE <- mean_treated - mean_control
# Imprimir el ATE con tres decimales
print(round(ATE, 3))
# Calcular la varianza muestral para cada grupo
var_control <- var(data$Y[data$T == 0], na.rm = T)
# Calcular la varianza muestral para cada grupo
var_control <- var(data$Y[data$T == 0])
var_treatment <- var(data$Y[data$T == 1])
# Calcular el tamaño de muestra para cada grupo
N_c <- sum(data$T == 0)
N_t <- sum(data$T == 1)
# Calcular el estimador conservador de la varianza muestral de Neyman
V_neyman <- (var_control / N_c) + (var_treatment / N_t)
# Imprimir el resultado redondeado a dos decimales
print(round(V_neyman, 2))
# Valor de z para un intervalo de confianza del 95%
z <- 1.96
# Calcular el intervalo de confianza
lower_bound <- ATE - z * sqrt(V_neyman)
upper_bound <- ATE + z * sqrt(V_neyman)
# Imprimir los límites inferior y superior redondeados a dos decimales
print(round(lower_bound, 2))
print(round(upper_bound, 2))
?rexp
df5 = data.frame()
for (i in 1:10000) {
df5 <- rbind(df5, rexp(5, 2))
}
df5$mean <- rowMeans(df5, na.rm = TRUE, dims = 1)
df5
library(ggplot2)
# Función para simular la distribución de la media muestral
simulate_means <- function(n, lambda, iterations) {
means <- replicate(iterations, mean(rexp(n, lambda)))
return(means)
}
# Parámetros
lambda <- 2
iterations <- 10000
# Simulación para diferentes tamaños de muestra
means_n1 <- simulate_means(1, lambda, iterations)
means_n5 <- simulate_means(5, lambda, iterations)
means_n10 <- simulate_means(10, lambda, iterations)
means_n30 <- simulate_means(30, lambda, iterations)
# Crear un dataframe con los resultados
df <- data.frame(
mean_n1 = means_n1,
mean_n5 = means_n5,
mean_n10 = means_n10,
mean_n30 = means_n30
)
# Plotting histograms
ggplot(df, aes(x = mean_n1)) +
geom_histogram(aes(y = ..density..), binwidth = 0.01, fill = "red", alpha = 0.5) +
geom_histogram(aes(x = mean_n5, y = ..density..), binwidth = 0.01, fill = "blue", alpha = 0.5) +
geom_histogram(aes(x = mean_n10, y = ..density..), binwidth = 0.01, fill = "green", alpha = 0.5) +
geom_histogram(aes(x = mean_n30, y = ..density..), binwidth = 0.01, fill = "purple", alpha = 0.5) +
labs(title = "Distributions of Sample Means for Different Sample Sizes", x = "Sample Mean", y = "Density") +
theme_minimal()
means_n5
mean(means_n5)
mean(means_n30)
mean(means_n5)-mean(means_n30)
sd(means_n5)-sd(means_n30)
sd(means_n5,df=1)-sd(means_n30,df=1)
?sd
sd(means_n5)-sd(means_n30)
mean(means_n5)/mean(means_n30)
sd(means_n5)/sd(means_n30)
mean(means_n30)/mean(means_n5)
sd(means_n30)/sd(means_n5)
1/sqrt(6)
?t.test
tq_get("SPY", from = "2000-01-01", to = "2000-02-01", get = "financials", source = "yahoo")
library(tidyquant)
tq_get("SPY", from = "2000-01-01", to = "2000-02-01", get = "financials", source = "yahoo")
tq_get("SPY", from = "2000-01-01", to = "2000-02-01", get = "financials", source = "yahoo")
source("~/.active-rstudio-document", echo=TRUE)
# Carga el paquete quantmod
library(quantmod)
# Define el símbolo de la acción (por ejemplo, Apple)
symbol <- "AAPL"
# Obtén los datos financieros (Income Statement, Balance Sheet, y Cash Flow Statement)
financials <- getFin(symbol, src = "yahoo")
# Obtén los datos financieros (Income Statement, Balance Sheet, y Cash Flow Statement)
financials <- getFin(symbol, src = "google")
# Obtén los datos financieros (Income Statement, Balance Sheet, y Cash Flow Statement)
financials <- getFin(symbol, src = "Quandl")
# Muestra el estado de resultados (Income Statement)
financials$AAPL.f$IS
# Coloca tu API key de Quandl (crea una cuenta en https://www.quandl.com/ para obtener la key)
Quandl.api_key("g1N8gJf_EbstoU8-We_d")
# Carga el paquete
library(Quandl)
# Coloca tu API key de Quandl (crea una cuenta en https://www.quandl.com/ para obtener la key)
Quandl.api_key("g1N8gJf_EbstoU8-We_d")
# Obtener datos de precios para una acción
data <- Quandl("WIKI/AAPL", start_date="2022-01-01", end_date="2023-01-01")
# Obtener datos de precios para una acción
data <- Quandl("/api/v3/datasets/WIKI/AAPL", start_date="2022-01-01", end_date="2023-01-01")
tq_get("EIA/PET_MTTIMUS1_M", get = "quandl", from = "2010-01-01")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
startdate <- as.Date("2022-01-01") # Fecha de inicio
startdate
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
tq_get_options()
source("~/.active-rstudio-document", echo=TRUE)
# {3} Displaying distribution
library(ggplot2)
library(tidyquant)
install.packages(tidyquant)
install.packages("tidyquant")
install.packages("Tidyquant")
install.packages("tidyquant")
install.packages("httr2")
install.packages("sh")
install.packages("httr2")
install.packages("tidyquant")
.libPaths()
library(tidyquant)
library("tidyquant")
install.packages("tidyquant")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
update.packages(ask = FALSE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
btc_usd_data
btc_usd_data %>% length
load("~/OneDrive - Universidad del Pacífico/Educacion/UP/Ciclo 8/Finanzas Cuantitativas/Tutorials/Tutorial 6/.RData")
source("~/OneDrive - Universidad del Pacífico/Research/Academic/orthogonal_portfolios/code/00_aer_results_v1.R", echo=TRUE)
